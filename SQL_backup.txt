/* Complete queries are seperated by comments. 
Highlight individual queries to run them and see what they do (I used Ctrl+Enter to test everything).
This includes everything from SELECT, to building tables, views, and triggers. 

Notes to the reader: 
    This requires a DB found in the Github, although, it's not unlikely the code can be understood "at a glance" for the sake of brevity. 
    The "DUAL" table is a dummy table used for testing various methods and functions. 
    Sometimes conventional spacing & formatting is flattened to a single line to conserve space because proper inferencing of each line is not expected to be lost on the reader (think single-row functions).


Enjoy!! 
 -Hunter D. LaValley */

  --Note to self: Section headers have 7 idents 

                            /* Basics of Filtering */

-- SELECT everything from the table called emp using the asterisk *  

SELECT *
FROM EMP

-- SELECT a single column by name 
SELECT JOB
FROM EMP

-- Use commas to separate multiple columns from a table in a single query such as the JOB and SAL columns in emp  

SELECT JOB, SAL
FROM EMP
-- Use "AS" to temporarily rename columns in DOUBLE quotes 
SELECT JOB AS "Position", SAL AS "Salary"
FROM EMP

-- Use WHERE to filter results. Single quotes for querying, double for renaming. 
SELECT *
FROM emp
WHERE JOB = 'MANAGER'

/* You can further filter queries in the usual way with conditional and logical operators. 
Here are a few such examples: using AND, OR, BETWEEN, >, >=, <, =<, <>, =!  */

-- Filtering with OR   
SELECT *
FROM emp
WHERE JOB = 'MANAGER'
OR JOB = 'ANALYST'

-- Filtering with OR & AND 
SELECT * 
FROM EMP
WHERE (JOB = 'MANAGER'
OR JOB = 'ANALYST')
AND SAL > 2500

SELECT SAL
FROM EMP
WHERE SAL BETWEEN 2850 AND 5000 -- BETWEEN is *inclusive* to its upper and lower bounds 

SELECT *
FROM emp
WHERE (JOB = 'MANAGER'
OR JOB = 'ANALYST')
AND (SAL BETWEEN 2500 AND 3500)

-- Filtering with OR & AND with wrapping with ()   
SELECT *
FROM emp
WHERE (JOB = 'MANAGER'
OR JOB = 'ANALYST')
AND SAL >= 2975

--Long Filters 
SELECT *
FROM emp
WHERE (JOB = 'MANAGER'
OR JOB = 'ANALYST')
AND (SAL > 2000 -- Wrap elongated conditions in parantheses to filter more intuitively 
OR SAL < 2000
OR SAL <= 2000
OR SAL <> 3000
OR SAL != 3000)  -- "<>" is the same as "=!"  

--Use "in" when you don't want to say "OR" or "=" too many times. It is inclusive and many statements work more preferably as a tuple 
SELECT *
FROM EMP
WHERE DEPTNO IN (20,30) 

-- Filtering with LIKE is case sensitive but works like ordinary wildcard search filters otherwise 

SELECT * FROM EMP
WHERE JOB LIKE '%GER'

SELECT JOB
FROM EMP
WHERE JOB LIKE '%LE%'

SELECT DISTINCT JOB
FROM EMP
WHERE JOB LIKE '%LE%'

-- Filtering with ORDER BY 

Select *
FROM EMP
ORDER BY DEPTNO

SELECT *
FROM EMP
ORDER BY DEPTNO ASC OR -- This is the default sorting method when no other is specified 

SELECT *
FROM EMP
ORDER BY DEPTNO DESC 

SELECT *
FROM EMP
ORDER BY DEPTNO, SAL -- So this will order asc. first by DEPTNO then by SAL 

                            /* Single Row Functions */




-- Concatenation using || (Pipes)  

SELECT ename || ' is invited the company picnic!'
FROM EMP

-- You can concatenate multiple statements with multiple pipes 

SELECT 'The employee, ' || ename || ', in the position of ' || JOB || ', is due for a salary evaluation. '
FROM EMP

/* Concatenation using the concat() function will concatenate more like a print statement in the familiar Python language. 
However, this is limited in its number of arguments. If you're clever you can continuously embed concat()'s within one another 
like f(g(h(x))), but it is easier to lose track than if pipes were used instead. */

SELECT concat('We would like to thank ', ename)
FROM emp

-- You can concate both ways at the same time as well, and embed functions while you're at it.   

SELECT concat('We would like to thank ', initcap(ename)) || ' for exceeding expectations during our busy season.'
FROM emp

                            /* Using the DUAL Table to test functions that do not necessarily correlate to a table anywhere in the active database */


--SUBSTR('some_string', position, mangitude)  

SELECT 'Hello', substr('Hello', 2, 1)
FROM DUAL

SELECT 'Hello', substr('Hello', 2, 2)
FROM DUAL
-- It makes more sense to show how differences in parameter affect the output 
SELECT 'Hello', substr('Hello', 2, 3) 
FROM DUAL

--Padding, Trimming and Truncating  

--These are self-explanatory, they add and substract characters from a string  
-- 20 is the final length of the string 
SELECT RPAD('String', 20, '$')
FROM DUAL

SELECT LPAD('String', 20, '$')
FROM DUAL

SELECT LTRIM('SSSsuperrrrr', 'S')
FROM DUAL

SELECT RTRIM('SSSsupeRrrrr', 'r')
FROM DUAL

SELECT TRUNC(123.456789, 1 ) FROM DUAL
SELECT TRUNC(123.456789, 2 ) FROM DUAL
SELECT TRUNC(123.456789, 3 ) FROM DUAL

-- Numeric Functions  

SELECT ROUND(5.151515, 1)
FROM DUAL

SELECT ROUND(5.151515, 2) FROM DUAL
SELECT ROUND(5.151515, 3) FROM DUAL
SELECT ROUND(5.151515, -1)FROM DUAL


SELECT sysdate FROM DUAL
SELECT systimestamp FROM DUAL
SELECT TRUNC(systimestamp) FROM DUAL
SELECT TRUNC(systimestamp, 'DAY') FROM DUAL
SELECT TRUNC(systimestamp, 'MONTH') FROM DUAL
SELECT TRUNC(systimestamp, 'YEAR') FROM DUAL
SELECT TRUNC(hiredate, 'DAY') FROM DUAL

-- Add_months  
SELECT add_months('12/22/1994', 332) -- I am approximately 332 months old at the time I am wroting this, very cool.  
FROM DUAL

SELECT months_between('08/14/2022', '12/22/1994') -- Order matters with this function. If you reverse the arguments the result is negative. 
FROM DUAL

/* Casting to characters using TO_CHAR()  
There are many way to play around with date and number formatting, and often this needs to be represented as a string for messaging and titling.*/   

SELECT TO_CHAR(sysdate, 'mm/dd/yyyy')
FROM DUAL

SELECT TO_CHAR(sysdate, 'ddth "of" month, yyyy')
FROM DUAL

SELECT TO_CHAR(SAL, '$99,999.99') 
FROM DUAL

-- TO_DATE('string', 'format') works exactly like one would expect  

SELECT TO_DATE('2022-12-22', 'yyyy-mm-dd')
FROM DUAL

--The trick here is converting the string so that you make arithmetic possible
SELECT ADD_MONTHS( TO_DATE('2012-12-22', 'yyyy-mm-dd'), 116) 
FROM DUAL

                             /* Grouping & Aggregate Functions */
--Aggregate means the domain of the function is not singular
--Grouping is just another way of filtering

--Here the input is every record in SAL, and the output is maximum value. Similarly for other basic statistical functions.
SELECT MAX(SAL)
FROM emp

SELECT MIN(SAL)
FROM emp

--You can compound functions like f(g(h(x))) as much as you'd like. 
SELECT ROUND(avg(SAL), 2) 
FROM emp

--You can do the math inline if you would like
SELECT  (sum(SAL) )  - ( max(SAL) )
from EMP

/*   You can get pretty creative with function embedding as well, depending on what constraints are nec. for a desired output. 
Recall the formula for percent difference two values:
(|ΔΧ| / (ΣΧ/2) ) * 100
(Note: You can drop the absolute value bars if you make your numerator positive to begin with):    */

-- KING has a salary of 5000 (the maximum salary)
-- SMITH has a salary of 800 (the minimum salary)
-- Avg salary is roughly $2073

--The % Difference of the max and min salary is thus: 
SELECT 
ROUND( 
    ((max(SAL) - min(SAL)) / (max(SAL) + min(SAL))/2) * 100, 2) || '%'
    AS "The % Difference of the Max and Min Salary"
FROM emp

-- % Difference between max and average
SELECT 
ROUND(
    ((max(SAL) - avg(SAL)) / (max(SAL) + avg(SAL))/2) * 100, 2) || '%'
    AS "The % Difference of the Max and Avg Salary"
FROM emp

-- % Difference between avg and min
SELECT 
ROUND(
((avg(SAL) - min(SAL)) / (avg(SAL) + min(SAL))/2) * 100, 2) || '%'
    AS "The % Difference of the Avg and Min Salary"
FROM emp

--We can combine them into one statement as well if we wanted to as well if we just delimit them with commas

SELECT 
ROUND( 
    ((max(SAL) - min(SAL)) / (max(SAL) + min(SAL))/2) * 100, 2) || '%'
    AS "The % Difference of the Max and Min Salary",

ROUND(
    ((max(SAL) - avg(SAL)) / (max(SAL) + avg(SAL))/2) * 100, 2) || '%'
    AS "The % Difference of the Max and Avg Salary",

ROUND(
((avg(SAL) - min(SAL)) / (avg(SAL) + min(SAL))/2) * 100, 2) || '%'
    AS "The % Difference of the Avg and Min Salary"
FROM emp

/* Group By Statements*/

SELECT Round(AVG(SAL),2) AS "Average Salary per Job", JOB
FROM EMP
GROUP BY JOB

SELECT COUNT(*) AS "Number of People per Job", JOB
FROM EMP
GROUP BY JOB

--You can further specify count like anything else, perhaps you only want to return jobs with less than 5 people working in that department them for a promotional reason

SELECT COUNT(*) AS "Number of People per Job", JOB
FROM EMP
GROUP BY JOB
HAVING COUNT(*) < 5 
ORDER BY JOB

/*I do not think there are enough records per field to show this ordering schema very clearly
but essentially, if you wanted to, you could combine the way you ordered and grouped data together to achieve a desired outcome.
Say, for example, you wanted to Group by Region in a state (West, Middle, and East), then by County (Asc.), and then further by incarceration rate:
you could increasingly group and order your search window as much as possible as long as you could read your output. 
Here, notice the pattern Analyst always precedes clerk in a given Department Number
    Clerk always precedes Manager
        thus, if there were enough records, it could be observed that the pattern goes: Analyst, Clerk, Manager*/

SELECT JOB, COUNT(*) AS "Department Size", DEPTNO AS "Department Number"
FROM EMP
GROUP BY JOB, DEPTNO
ORDER BY DEPTNO ASC

                            /* Nested SELECT Statements */
--Just think about these as f(g(h(x))) where the function gets evaluated from the inside out. 

--The inside of this, the g(x), essentially says "Set DEPTNO = 30"
    --thus the (f(g(x)) says "Return everything from DEPT where DEPTNO < 30" 
SELECT * FROM DEPT
WHERE DEPTNO < (
    SELECT DEPTNO 
    FROM DEPT
    WHERE DEPTNO = 30)

--Again, the inside says: Return DEPTNO's from DEPT in Chicago
    --Then we select everything from EMP satisfying that DEPTNO constraint
        --This is just a fancy way of returning results from multiple tables simultaneously. 
SELECT *
FROM EMP
WHERE DEPTNO = (SELECT
                DEPTNO
                FROM DEPT
                WHERE LOC = 'CHICAGO')

                            /* Aliasing & Nested Queries*/

/*Recall both tables EMP and DEPT have a "DEPTNO" field, we represent both of these tables simultaneously about this dimension.
This is nice because it reads like OOP, it basically says:
    Select all fields from EMP and DEPT simultaneously such that the condition (DEPTNO in EMP = DEPTNO in DEPT) is satisfied. 
        It is only slightly confusing because it says DEPT so many times (later, we use aliases to abate such redundancies), but conceptually it is very simple. In DBMS this equality is usually related with a line between tables. */
SELECT *
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO

--Moreover, we could have used this notation all along, if we really wanted to, for describing any columns we wanted to return

SELECT EMP.JOB
FROM EMP

SELECT EMP.SAL
FROM EMP

--This does not require polymorphism, it is just the way I wrote it; you can order your columns and tables any (legal) way and return a coherent result
SELECT EMP.JOB, DEPT.LOC
FROM EMP, DEPT

--To disambiguate fields which belong to multiple tables we must use this OOP notation for multi-tabular queries as in the following way: 

SELECT EMP.ENAME, EMP.JOB, DEPT.LOC
FROM EMP, DEPT
WHERE DEPTNO > 20 --This field belongs to both DEPT and EMP, so you have to specifically say EMP.DEPTNO or DEPT.DEPTNO

SELECT EMP.ENAME, EMP.JOB, DEPT.LOC
FROM EMP, DEPT
WHERE EMP.DEPTNO > 20

--Using successive aliases to eliminate redundancies to the reader

SELECT e.ENAME AS "Employee Name", e.JOB as "Job", d.LOC as "Location"
FROM EMP e, DEPT d 
WHERE d.DEPTNO > 20

--A more technical example using nested queries
--Technically the nested queries satisfy as tables so you're just pulling from a fancy table in each case, then aliasing it
SELECT e.ENAME as "Employee Name", e.JOB as "Job", d.LOC as "Location"
FROM(Select * FROM EMP WHERE JOB IN ('MANAGER', 'CLERK')) e, (SELECT * FROM DEPT WHERE LOC = 'DALLAS') d
WHERE e.DEPTNO = d.DEPTNO
AND LOC = 'DALLAS'

                            /* Joins */

/*There is not much to say about the basic joins, they follow basic set theory as you would expect; most notably in the way that "x < y" ≡ "y > x", also complements, intersections, disjoints work the same as well. 
If you really want to get technical, you can play around with joining more than 3 tables and invoke DeMorgan's Laws which essentially go:
1) The complement of the union equals the intersection of the complements
2) The complement of the intersection equals the union of the complements*/

--Inner Join = ({*})

SELECT *
FROM emp INNER JOIN dept
ON emp.deptno = dept.deptno


--Full Outer Join = = (*{*}*)

SELECT *
FROM emp FULL OUTER JOIN dept
ON emp.deptno = dept.deptno

--Right Join = ({*}*)

SELECT *
FROM emp RIGHT JOIN dept
ON emp.deptno = dept.deptno

--Right Outer Join = ({}*)

SELECT *
FROM emp Right OUTER JOIN dept
ON emp.deptno = dept.deptno

--Left Join = (*{*})

SELECT *
FROM emp LEFT JOIN dept
ON emp.deptno = dept.deptno

--Left Outer Join = (*{})

SELECT *
FROM emp Left Outer JOIN dept
ON emp.deptno = dept.deptno
--Again, it just depends on what exactly you want to steal from another column and throw together.
--This is especially useful if you have a ton of views or windows or just any table (depending on where you get your terminology) and you want to throw something together quickly. 
--If your resultant table leaves you with a lot of empty values/null values you may want to think about using NVL or IFNULL functions to replace nulls with weighted averages, 0's, or something else useful. 


--Cross Join's follow a Cartesian product 
--Recall from set theory A x B = {(a,b)| a ε A, b ε B}
--You'll get 56 rows because it's basically 14 rows from emp crossed with 4 rows from dept
SELECT * 
FROM EMP CROSS JOIN DEPT

--The USING clause is used to match only one column when more than one column matches because perhaps you would like to be more selective. 

--Creating a new table

CREATE TABLE job_grade
    (Grade_Level varchar(2) not null,
    Lowest_Salary number not null,
    Highest_Salary number not null)

INSERT ALL 
    INTO job_grade
    VALUES ( 'A', 0, 1000)
    INTO job_grade
    VALUES ( 'B', 1001, 2000)
    INTO job_grade
    VALUES ( 'C', 2001, 3000)   
    INTO job_grade 
    VALUES ( 'D', 3001, 4000)
    INTO job_grade
    VALUES ( 'E', 4001, 5000)
SELECT * FROM DUAL   

SELECT * 
FROM job_grade

--Non-equijoin
--We'll join for salary even though the columns are not named the same 
SELECT e.ename, e.sal, j.Grade_Level
FROM EMP e JOIN job_grade j
ON e.SAL
BETWEEN j.Lowest_Salary AND j.Highest_Salary

--Case Statements
--These are for formatting data that gets returned on a condition (i.e. a WHEN-THEN query)

SELECT ename, job, 
(CASE JOB
WHEN 'PRESIDENT' THEN 'Organize Meetings'
WHEN 'CLERK' THEN 'Record Retrieval'
WHEN 'ANALYST' THEN 'Record Analysis'
WHEN 'MANAGER' THEN 'Operations Specialist'
ELSE 'TBA' END) AS "Duty"
FROM emp;

--You can get creative with the conditioned retrieval and annotations as well
--Essentially everything we did the in beginning with basic query filtering can be applied to conditional casing
SELECT sal, ename, job, 
(CASE
WHEN SAL >= 3000 AND SAL < 5000 THEN 'Requires Annual Background Check by Policy'
WHEN SAL < 3000 THEN 'No Background Check Required'
ELSE 'Orders the Screening'
END)
AS "Background Screening Status"
FROM emp; 

--Sliding Windows
--Just adds a 2-cell slider for weights together and calls it the "running weight"
-- 1+1 =2, 1+1=2, 1+2=3, 2+2 = 4, 3+2 = 5. 
--You can change the size of the slider if you would like, here it is set to 1 preceding row. 

SELECT b.*,
    sum (weight) over (
        ORDER BY weight ROWS BETWEEN 1 PRECEDING 
        AND CURRENT ROW) running_weight
FROM bricks b
ORDER BY weight
        
--If you set the slider to be unbounded then it works the way a running total is usually used in VBA to make a cumulative running total 
SELECT b.*,
    sum (weight) over (
        ORDER BY weight ROWS BETWEEN UNBOUNDED PRECEDING 
        AND CURRENT ROW) running_weight
FROM bricks b
ORDER BY weight

--Filtering Analytic functions (Recall you cannot use WHERE with aggregate functions, use HAVING instead) 
--This is just because databases compute analytic functions after the where clause which just throws a logical error
--This is why you have to bury it in a subquery if you really want to use them together because the inner functions get computed first as in f(g(h(x)))
SELECT * 
FROM (
    SELECT b.*,
        count(*) OVER(PARTITION BY colour) colour_count
    FROM bricks b
    )
WHERE colour_count >=2

--Rank, Dense-Rank, Lead & Lag
--Rank: Rows with the same value in the ORDER BY have the same rank
--Dense_rank: Rows with the same value in the ORDER BY have the same rank if there are no gaps involved
--Row_number(): reach row has a new value

SELECT brick_id, weight,
    ROW_NUMBER() OVER(ORDER BY weight) rn,
    RANK() OVER(ORDER BY WEIGHT) rk,
    DENSE_RANK() OVER (ORDER BY WEIGHT) dr
FROM bricks;

--Lead and Lag are pretty intuitive, lag gives the previous value and looks ahead at the next shape. 
SELECT b.*,
    LAG(shape) OVER (ORDER BY brick_id) previous_shape,
    LEAD(shape) OVER(ORDER BY brick_id) next_shape
FROM bricks b

--Similarly, first_value() and last_value() are self explanatory, except last_value changes for each row. 
SELECT b.*,
    FIRST_VALUE(weight) OVER(ORDER BY brick_id) first_weight_by_brick_id,
    LAST_VALUE(weight) OVER(ORDER BY brick_id) last_weight_by_brick_id
FROM bricks b

SELECT SUM(SAL), ename FROM emp
GROUP BY ename

--CRUD Tasks (Create, Retrieve, Update, Delete)
--Mostly C,U, & D, we have been doing R the whole time. 

CREATE TABLE stores
( 
    store_id NUMBER NOT NULL,
    city VARCHAR(50)
)
--Single row function way of inserting items into a table
INSERT INTO stores(store_id, city)
VALUES(1, 'San Francisco')

INSERT INTO stores(store_id, city)
VALUES(2, 'New York City')

INSERT INTO stores(store_id, city)
VALUES(3, 'Chicago')

--Aggregate way of inserting into a table
INSERT ALL
    INTO stores (store_id, city) VALUES (4, 'Philadelphia')
    INTO stores (store_id, city) VALUES (5, 'Boston')
    INTO stores (store_id, city) VALUES (6,'Seattle')
SELECT * FROM DUAL    

--Making another table for the sake of variety

CREATE TABLE products
(
product_id NUMBER NOT NULL,
name VARCHAR(50),
product_cost NUMBER(5,2),
product_retail NUMBER(5,2),
product_type VARCHAR(10),
store_id NUMBER NOT NULL, 

CONSTRAINT product_pk PRIMARY KEY (product_id)
)

-- Need some products in the table itself

INSERT INTO products (product_id, name, product_cost, product_retail, product_type, store_id)
VALUES (1001, 'Colgate Toothpaste', 2.25, 5.47, 'hygiene', 2)

INSERT INTO products (product_id, name, product_cost, product_retail, product_type, store_id)
VALUES (1002, 'Colgate Toothpaste', 2.25, 5.47, 'hygiene', 2)

INSERT INTO products (product_id, name, product_cost, product_retail, product_type, store_id)
VALUES (1003, 'Listerine Mouthwash', 1.75, 4.81 'hygiene', 2)

INSERT ALL
INTO products (product_id, name, product_cost, product_retail, product_type, store_id)
    VALUES (1004, 'T-shirt', 1.75, 7.77, 'Clothing', 2)
INTO products (product_id, name, product_cost, product_retail, product_type, store_id)
    VALUES (1005, 'T-shirt', 1.65, 7.85, 'Clothing', 2)
INTO products (product_id, name, product_cost, product_retail, product_type, store_id)
    VALUES (1006, 'T-shirt', 1.73, 7.80, 'Clothing', 3)
INTO products (product_id, name, product_cost, product_retail, product_type, store_id)
    VALUES (1007, 'Shorts', 0.73, 5.60, 'Clothing', 3)
INTO products (product_id, name, product_cost, product_retail, product_type, store_id)
    VALUES (1008, 'Dress Shoes', 17.85, 87.67, 'Clothing', 2)
INTO products (product_id, name, product_cost, product_retail, product_type, store_id)
    VALUES (1009, 'Garden Chair', 12.01, 27.87, 'Gardening', 2)
INTO products (product_id, name, product_cost, product_retail, product_type, store_id)
    VALUES (1010, 'Grass Fertilizer', 3.2, 8.70, 'Gardening', 2)
SELECT * FROM DUAL 

